// Mocks generated by Mockito 5.4.2 from annotations
// in hedeyeti/test/services/database_helper_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:cloud_firestore/cloud_firestore.dart' as _i4;
import 'package:hedeyeti/models/Event.dart' as _i9;
import 'package:hedeyeti/models/Gift.dart' as _i10;
import 'package:hedeyeti/models/LocalUser.dart' as _i8;
import 'package:hedeyeti/services/firebase_helper.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;
import 'package:sqflite_common/sql.dart' as _i6;
import 'package:sqflite_common/sqlite_api.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDatabase_0 extends _i1.SmartFake implements _i2.Database {
  _FakeDatabase_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFuture_1<T1> extends _i1.SmartFake implements _i3.Future<T1> {
  _FakeFuture_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeQueryCursor_2 extends _i1.SmartFake implements _i2.QueryCursor {
  _FakeQueryCursor_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBatch_3 extends _i1.SmartFake implements _i2.Batch {
  _FakeBatch_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCollectionReference_4<T extends Object?> extends _i1.SmartFake
    implements _i4.CollectionReference<T> {
  _FakeCollectionReference_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Database].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabase extends _i1.Mock implements _i2.Database {
  MockDatabase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: '',
      ) as String);

  @override
  bool get isOpen => (super.noSuchMethod(
        Invocation.getter(#isOpen),
        returnValue: false,
      ) as bool);

  @override
  _i2.Database get database => (super.noSuchMethod(
        Invocation.getter(#database),
        returnValue: _FakeDatabase_0(
          this,
          Invocation.getter(#database),
        ),
      ) as _i2.Database);

  @override
  _i3.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<T> transaction<T>(
    _i3.Future<T> Function(_i2.Transaction)? action, {
    bool? exclusive,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #transaction,
          [action],
          {#exclusive: exclusive},
        ),
        returnValue: _i5.ifNotNull(
              _i5.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #transaction,
                  [action],
                  {#exclusive: exclusive},
                ),
              ),
              (T v) => _i3.Future<T>.value(v),
            ) ??
            _FakeFuture_1<T>(
              this,
              Invocation.method(
                #transaction,
                [action],
                {#exclusive: exclusive},
              ),
            ),
      ) as _i3.Future<T>);

  @override
  _i3.Future<T> readTransaction<T>(
          _i3.Future<T> Function(_i2.Transaction)? action) =>
      (super.noSuchMethod(
        Invocation.method(
          #readTransaction,
          [action],
        ),
        returnValue: _i5.ifNotNull(
              _i5.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #readTransaction,
                  [action],
                ),
              ),
              (T v) => _i3.Future<T>.value(v),
            ) ??
            _FakeFuture_1<T>(
              this,
              Invocation.method(
                #readTransaction,
                [action],
              ),
            ),
      ) as _i3.Future<T>);

  @override
  _i3.Future<T> devInvokeMethod<T>(
    String? method, [
    Object? arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #devInvokeMethod,
          [
            method,
            arguments,
          ],
        ),
        returnValue: _i5.ifNotNull(
              _i5.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #devInvokeMethod,
                  [
                    method,
                    arguments,
                  ],
                ),
              ),
              (T v) => _i3.Future<T>.value(v),
            ) ??
            _FakeFuture_1<T>(
              this,
              Invocation.method(
                #devInvokeMethod,
                [
                  method,
                  arguments,
                ],
              ),
            ),
      ) as _i3.Future<T>);

  @override
  _i3.Future<T> devInvokeSqlMethod<T>(
    String? method,
    String? sql, [
    List<Object?>? arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #devInvokeSqlMethod,
          [
            method,
            sql,
            arguments,
          ],
        ),
        returnValue: _i5.ifNotNull(
              _i5.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #devInvokeSqlMethod,
                  [
                    method,
                    sql,
                    arguments,
                  ],
                ),
              ),
              (T v) => _i3.Future<T>.value(v),
            ) ??
            _FakeFuture_1<T>(
              this,
              Invocation.method(
                #devInvokeSqlMethod,
                [
                  method,
                  sql,
                  arguments,
                ],
              ),
            ),
      ) as _i3.Future<T>);

  @override
  _i3.Future<void> execute(
    String? sql, [
    List<Object?>? arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [
            sql,
            arguments,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<int> rawInsert(
    String? sql, [
    List<Object?>? arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #rawInsert,
          [
            sql,
            arguments,
          ],
        ),
        returnValue: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);

  @override
  _i3.Future<int> insert(
    String? table,
    Map<String, Object?>? values, {
    String? nullColumnHack,
    _i6.ConflictAlgorithm? conflictAlgorithm,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #insert,
          [
            table,
            values,
          ],
          {
            #nullColumnHack: nullColumnHack,
            #conflictAlgorithm: conflictAlgorithm,
          },
        ),
        returnValue: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);

  @override
  _i3.Future<List<Map<String, Object?>>> query(
    String? table, {
    bool? distinct,
    List<String>? columns,
    String? where,
    List<Object?>? whereArgs,
    String? groupBy,
    String? having,
    String? orderBy,
    int? limit,
    int? offset,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #query,
          [table],
          {
            #distinct: distinct,
            #columns: columns,
            #where: where,
            #whereArgs: whereArgs,
            #groupBy: groupBy,
            #having: having,
            #orderBy: orderBy,
            #limit: limit,
            #offset: offset,
          },
        ),
        returnValue: _i3.Future<List<Map<String, Object?>>>.value(
            <Map<String, Object?>>[]),
      ) as _i3.Future<List<Map<String, Object?>>>);

  @override
  _i3.Future<List<Map<String, Object?>>> rawQuery(
    String? sql, [
    List<Object?>? arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #rawQuery,
          [
            sql,
            arguments,
          ],
        ),
        returnValue: _i3.Future<List<Map<String, Object?>>>.value(
            <Map<String, Object?>>[]),
      ) as _i3.Future<List<Map<String, Object?>>>);

  @override
  _i3.Future<_i2.QueryCursor> rawQueryCursor(
    String? sql,
    List<Object?>? arguments, {
    int? bufferSize,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #rawQueryCursor,
          [
            sql,
            arguments,
          ],
          {#bufferSize: bufferSize},
        ),
        returnValue: _i3.Future<_i2.QueryCursor>.value(_FakeQueryCursor_2(
          this,
          Invocation.method(
            #rawQueryCursor,
            [
              sql,
              arguments,
            ],
            {#bufferSize: bufferSize},
          ),
        )),
      ) as _i3.Future<_i2.QueryCursor>);

  @override
  _i3.Future<_i2.QueryCursor> queryCursor(
    String? table, {
    bool? distinct,
    List<String>? columns,
    String? where,
    List<Object?>? whereArgs,
    String? groupBy,
    String? having,
    String? orderBy,
    int? limit,
    int? offset,
    int? bufferSize,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #queryCursor,
          [table],
          {
            #distinct: distinct,
            #columns: columns,
            #where: where,
            #whereArgs: whereArgs,
            #groupBy: groupBy,
            #having: having,
            #orderBy: orderBy,
            #limit: limit,
            #offset: offset,
            #bufferSize: bufferSize,
          },
        ),
        returnValue: _i3.Future<_i2.QueryCursor>.value(_FakeQueryCursor_2(
          this,
          Invocation.method(
            #queryCursor,
            [table],
            {
              #distinct: distinct,
              #columns: columns,
              #where: where,
              #whereArgs: whereArgs,
              #groupBy: groupBy,
              #having: having,
              #orderBy: orderBy,
              #limit: limit,
              #offset: offset,
              #bufferSize: bufferSize,
            },
          ),
        )),
      ) as _i3.Future<_i2.QueryCursor>);

  @override
  _i3.Future<int> rawUpdate(
    String? sql, [
    List<Object?>? arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #rawUpdate,
          [
            sql,
            arguments,
          ],
        ),
        returnValue: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);

  @override
  _i3.Future<int> update(
    String? table,
    Map<String, Object?>? values, {
    String? where,
    List<Object?>? whereArgs,
    _i6.ConflictAlgorithm? conflictAlgorithm,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [
            table,
            values,
          ],
          {
            #where: where,
            #whereArgs: whereArgs,
            #conflictAlgorithm: conflictAlgorithm,
          },
        ),
        returnValue: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);

  @override
  _i3.Future<int> rawDelete(
    String? sql, [
    List<Object?>? arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #rawDelete,
          [
            sql,
            arguments,
          ],
        ),
        returnValue: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);

  @override
  _i3.Future<int> delete(
    String? table, {
    String? where,
    List<Object?>? whereArgs,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [table],
          {
            #where: where,
            #whereArgs: whereArgs,
          },
        ),
        returnValue: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);

  @override
  _i2.Batch batch() => (super.noSuchMethod(
        Invocation.method(
          #batch,
          [],
        ),
        returnValue: _FakeBatch_3(
          this,
          Invocation.method(
            #batch,
            [],
          ),
        ),
      ) as _i2.Batch);
}

/// A class which mocks [FirebaseHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseHelper extends _i1.Mock implements _i7.FirebaseHelper {
  MockFirebaseHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.CollectionReference<Object?> get users => (super.noSuchMethod(
        Invocation.getter(#users),
        returnValue: _FakeCollectionReference_4<Object?>(
          this,
          Invocation.getter(#users),
        ),
      ) as _i4.CollectionReference<Object?>);

  @override
  _i4.CollectionReference<Object?> get events => (super.noSuchMethod(
        Invocation.getter(#events),
        returnValue: _FakeCollectionReference_4<Object?>(
          this,
          Invocation.getter(#events),
        ),
      ) as _i4.CollectionReference<Object?>);

  @override
  _i4.CollectionReference<Object?> get gifts => (super.noSuchMethod(
        Invocation.getter(#gifts),
        returnValue: _FakeCollectionReference_4<Object?>(
          this,
          Invocation.getter(#gifts),
        ),
      ) as _i4.CollectionReference<Object?>);

  @override
  _i4.CollectionReference<Object?> get friends => (super.noSuchMethod(
        Invocation.getter(#friends),
        returnValue: _FakeCollectionReference_4<Object?>(
          this,
          Invocation.getter(#friends),
        ),
      ) as _i4.CollectionReference<Object?>);

  @override
  _i3.Future<_i8.LocalUser?> registerUser(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #registerUser,
          [
            email,
            password,
          ],
        ),
        returnValue: _i3.Future<_i8.LocalUser?>.value(),
      ) as _i3.Future<_i8.LocalUser?>);

  @override
  _i3.Future<_i8.LocalUser?> loginUser(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #loginUser,
          [
            email,
            password,
          ],
        ),
        returnValue: _i3.Future<_i8.LocalUser?>.value(),
      ) as _i3.Future<_i8.LocalUser?>);

  @override
  _i3.Future<void> logoutUser() => (super.noSuchMethod(
        Invocation.method(
          #logoutUser,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<_i8.LocalUser?> getCurrentUser() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentUser,
          [],
        ),
        returnValue: _i3.Future<_i8.LocalUser?>.value(),
      ) as _i3.Future<_i8.LocalUser?>);

  @override
  _i3.Future<_i8.LocalUser?> getUserFromFirestore(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserFromFirestore,
          [userId],
        ),
        returnValue: _i3.Future<_i8.LocalUser?>.value(),
      ) as _i3.Future<_i8.LocalUser?>);

  @override
  _i3.Future<void> updateUserInFirestore({
    required String? userId,
    String? name,
    String? email,
    String? profilePicture,
    bool? notificationPush,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateUserInFirestore,
          [],
          {
            #userId: userId,
            #name: name,
            #email: email,
            #profilePicture: profilePicture,
            #notificationPush: notificationPush,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> addFriendInFirestore(
    String? userId,
    String? friendId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addFriendInFirestore,
          [
            userId,
            friendId,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> removeFriendInFirestore(
    String? userId,
    String? friendId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeFriendInFirestore,
          [
            userId,
            friendId,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<_i8.LocalUser?> searchUserByEmailInFirestore(String? email) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchUserByEmailInFirestore,
          [email],
        ),
        returnValue: _i3.Future<_i8.LocalUser?>.value(),
      ) as _i3.Future<_i8.LocalUser?>);

  @override
  _i3.Future<bool> isFriendInFirestore(
    String? userId,
    String? friendId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #isFriendInFirestore,
          [
            userId,
            friendId,
          ],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<List<_i8.LocalUser>> getFriendsFromFirestore(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFriendsFromFirestore,
          [userId],
        ),
        returnValue: _i3.Future<List<_i8.LocalUser>>.value(<_i8.LocalUser>[]),
      ) as _i3.Future<List<_i8.LocalUser>>);

  @override
  _i3.Future<void> insertEventInFirestore(_i9.Event? event) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertEventInFirestore,
          [event],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> updateEventInFirestore({
    required String? eventId,
    String? name,
    DateTime? date,
    String? category,
    String? location,
    String? description,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateEventInFirestore,
          [],
          {
            #eventId: eventId,
            #name: name,
            #date: date,
            #category: category,
            #location: location,
            #description: description,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> deleteEventInFirestore(String? eventId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteEventInFirestore,
          [eventId],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<List<_i9.Event>>? getEventsForUserFromFireStore(String? userId) =>
      (super.noSuchMethod(Invocation.method(
        #getEventsForUserFromFireStore,
        [userId],
      )) as _i3.Future<List<_i9.Event>>?);

  @override
  _i3.Future<_i9.Event?> getEventById(String? eventId) => (super.noSuchMethod(
        Invocation.method(
          #getEventById,
          [eventId],
        ),
        returnValue: _i3.Future<_i9.Event?>.value(),
      ) as _i3.Future<_i9.Event?>);

  @override
  _i3.Future<_i10.Gift?> getGiftById(String? giftId) => (super.noSuchMethod(
        Invocation.method(
          #getGiftById,
          [giftId],
        ),
        returnValue: _i3.Future<_i10.Gift?>.value(),
      ) as _i3.Future<_i10.Gift?>);

  @override
  _i3.Future<List<_i10.Gift>?> getGiftsForEventFromFirestore(String? eventId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getGiftsForEventFromFirestore,
          [eventId],
        ),
        returnValue: _i3.Future<List<_i10.Gift>?>.value(),
      ) as _i3.Future<List<_i10.Gift>?>);

  @override
  _i3.Future<List<_i10.Gift>?> getPledgedGiftsFromUserFromFirestore(
          String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPledgedGiftsFromUserFromFirestore,
          [userId],
        ),
        returnValue: _i3.Future<List<_i10.Gift>?>.value(),
      ) as _i3.Future<List<_i10.Gift>?>);

  @override
  _i3.Future<void> insertGiftInFirestore(_i10.Gift? gift) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertGiftInFirestore,
          [gift],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> updateGiftInFirestore({
    required String? giftId,
    String? name,
    String? category,
    String? description,
    double? price,
    String? status,
    String? pledgerId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateGiftInFirestore,
          [],
          {
            #giftId: giftId,
            #name: name,
            #category: category,
            #description: description,
            #price: price,
            #status: status,
            #pledgerId: pledgerId,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> deleteGiftInFirestore(String? giftId) => (super.noSuchMethod(
        Invocation.method(
          #deleteGiftInFirestore,
          [giftId],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  void listenForPledgedGifts(String? userId) => super.noSuchMethod(
        Invocation.method(
          #listenForPledgedGifts,
          [userId],
        ),
        returnValueForMissingStub: null,
      );
}
